terraform {
  backend "s3" {
    bucket = "rails-terraform-state-bucket-2025"
    key    = "ecs/terraform.tfstate"
    region = "us-east-1"
  }
}

provider "aws" {
  region = "us-east-1"
}

# 1. VPC and Networking
resource "aws_vpc" "main" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
}

resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id
}

resource "aws_subnet" "public_1" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "us-east-1a"
  map_public_ip_on_launch = true
}

resource "aws_subnet" "public_2" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.2.0/24"
  availability_zone       = "us-east-1b"
  map_public_ip_on_launch = true
}

# 2. Security Group
resource "aws_security_group" "app_sg" {
  name   = "app-sg"
  vpc_id = aws_vpc.main.id

  ingress {
    from_port   = 3000
    to_port     = 3000
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 5432
    to_port     = 5432
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# 3. RDS PostgreSQL
resource "aws_db_subnet_group" "db_subnet_group" {
  name       = "rails-db-subnet-group"
  subnet_ids = [aws_subnet.public_1.id, aws_subnet.public_2.id]
}

resource "aws_db_instance" "postgres" {
  allocated_storage      = 20
  engine                 = "postgres"
  engine_version         = "17.2"
  instance_class         = "db.t3.micro"
  db_name                = "railsdb"
  username               = var.db_username
  password               = var.db_password
  skip_final_snapshot    = true
  publicly_accessible    = true
  vpc_security_group_ids = [aws_security_group.app_sg.id]
  db_subnet_group_name   = aws_db_subnet_group.db_subnet_group.name
}

# 4. S3 Bucket for App Uploads
resource "aws_s3_bucket" "uploads" {
  bucket        = var.s3_bucket_name
  force_destroy = true
}

# 5. ECR
resource "aws_ecr_repository" "rails_app" {
  name = "rails-app"
}

resource "aws_ecr_lifecycle_policy" "rails_app_policy" {
  repository = aws_ecr_repository.rails_app.name

  policy = jsonencode({
    rules = [{
      rulePriority = 1,
      description  = "Expire untagged images > 14 days",
      selection = {
        tagStatus     = "untagged",
        countType     = "sinceImagePushed",
        countUnit     = "days",
        countNumber   = 14
      },
      action = {
        type = "expire"
      }
    }]
  })
}

# 6. IAM Role for ECS Execution
resource "aws_iam_role" "ecs_task_execution_role" {
  name = "ecsTaskExecutionRole"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect = "Allow",
      Principal = {
        Service = "ecs-tasks.amazonaws.com"
      },
      Action = "sts:AssumeRole"
    }]
  })
}

resource "aws_iam_role_policy_attachment" "ecs_execution_policy" {
  role       = aws_iam_role.ecs_task_execution_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
}

# 7. ECS Cluster
resource "aws_ecs_cluster" "main" {
  name = "rails-cluster"
}

# 8. Application Load Balancer
resource "aws_lb" "alb" {
  name               = "rails-alb"
  internal           = false
  load_balancer_type = "application"
  subnets            = [aws_subnet.public_1.id, aws_subnet.public_2.id]
  security_groups    = [aws_security_group.app_sg.id]
}

resource "aws_lb_target_group" "rails_tg" {
  name         = "rails-tg"
  port         = 3000
  protocol     = "HTTP"
  vpc_id       = aws_vpc.main.id
  target_type  = "ip"
}

resource "aws_lb_listener" "http" {
  load_balancer_arn = aws_lb.alb.arn
  port              = "80"
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.rails_tg.arn
  }
}

# 9. ECS Task Definition
resource "aws_ecs_task_definition" "rails_task" {
  family                   = "rails-task"
  requires_compatibilities = ["FARGATE"]
  network_mode             = "awsvpc"
  cpu                      = "512"
  memory                   = "1024"
  execution_role_arn       = aws_iam_role.ecs_task_execution_role.arn

  container_definitions = jsonencode([{
    name  = "rails-container",
    image = "${aws_ecr_repository.rails_app.repository_url}:latest",
    portMappings = [{
      containerPort = 3000,
      hostPort      = 3000,
      protocol      = "tcp"
    }],
    environment = [
      { name = "RAILS_ENV", value = "production" },
      { name = "DATABASE_HOST", value = aws_db_instance.postgres.address },
      { name = "DATABASE_USERNAME", value = var.db_username },
      { name = "DATABASE_PASSWORD", value = var.db_password },
      { name = "S3_BUCKET", value = aws_s3_bucket.uploads.bucket }
    ]
  }])
}

# 10. ECS Service
resource "aws_ecs_service" "rails_service" {
  name            = "rails-service"
  cluster         = aws_ecs_cluster.main.id
  task_definition = aws_ecs_task_definition.rails_task.arn
  launch_type     = "FARGATE"
  desired_count   = 1

  network_configuration {
    subnets         = [aws_subnet.public_1.id, aws_subnet.public_2.id]
    security_groups = [aws_security_group.app_sg.id]
    assign_public_ip = true
  }

  load_balancer {
    target_group_arn = aws_lb_target_group.rails_tg.arn
    container_name   = "rails-container"
    container_port   = 3000
  }

  depends_on = [aws_lb_listener.http]
}

# 11. Variables
variable "db_username" {
  default = "postgres"
}

variable "db_password" {
  default = "postgres123"
}

variable "s3_bucket_name" {
  default = "rails-app-uploads-example"
}

# 12. Outputs
output "alb_dns" {
  description = "Public DNS of the Application Load Balancer"
  value       = aws_lb.alb.dns_name
}
